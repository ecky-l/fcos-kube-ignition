variant: fcos
version: 1.0.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 AAA ...
storage:
  files:
    - path: /etc/modules-load.d/80-k8s.conf
      mode: 0644
      contents:
        inline: |
          br_netfilter
    - path: /etc/sysctl.d/80-k8s.conf
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          vm.swappiness = 0
    - path: /usr/local/bin/install-k8s.sh
      mode: 0755
      contents:
        inline: |
          #!/usr/bin/env bash
          # barely copied from https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
          set -e
          echo "installing packages"
          command -v ethtool 2 >/dev/null || rpm-ostree install conntrack ethtool nmap-ncat --reboot

          echo "disabling selinux"
          setenforce 0
          sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
          
          echo "installing cni plugins"
          mkdir -p /opt/cni/bin
          curl -fsL https://github.com/containernetworking/plugins/releases/download/v0.8.5/cni-plugins-linux-amd64-v0.8.5.tgz | tar -C /opt/cni/bin/ -xz
          RELEASE="$(curl -sfSL https://dl.k8s.io/release/stable.txt)"
          echo "installing kubernetes ${RELEASE}"
          for f in kubeadm kubelet kubectl; do
              curl -sfL --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${RELEASE}/bin/linux/amd64/$f --output /usr/local/bin/$f
              chmod 755 /usr/local/bin/$f;
          done

          echo "Installing crictl"
          CRICTL_VERSION="v1.18.0"
          curl -sfL https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz | tar -C /usr/local/bin/ -xz

          for s in containerd kubelet; do
              systemctl enable $s
              systemctl start $s
          done

          echo "Setting hostname"
          hostnamectl set-hostname master.playground.k8s
          echo "192.168.56.114 master.playground.k8s" >> /etc/hosts
          # kubeadm init --config /etc/kubernetes/kubeadm-custom-config.yaml | tee kubeadm_init.log
          touch /usr/local/.k8s_installed
    - path: /etc/kubernetes/kubeadm-custom-config.yaml
      mode: 0644
      contents:
        inline: |
          ---
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: InitConfiguration
          bootstrapTokens:
            - groups:
                - system:bootstrappers:kubeadm:default-node-token
              token: m41n6u.ix7tfu70yj9h94iw
              ttl: 24h0m0s
              usages:
                - signing
                - authentication
          localAPIEndpoint:
            advertiseAddress: 192.168.56.114
            bindPort: 6443
          nodeRegistration:
            criSocket: /run/containerd/containerd.sock
            name: master.playground.k8s
            taints:
              - effect: NoSchedule
                key: node-role.kubernetes.io/master
          ---
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: ClusterConfiguration
          kubernetesVersion: v1.18.2
          apiServer:
            extraArgs:
              advertise-address: 192.168.56.114
            timeoutForControlPlane: 4m0s
          certificatesDir: /etc/kubernetes/pki
          clusterName: kubernetes
          controllerManager:
            extraArgs:
              flex-volume-plugin-dir: /var/lib/kubelet/kubelet-plugins/volume/exec
          dns:
            type: CoreDNS
          etcd:
            local:
              dataDir: /var/lib/etcd
          imageRepository: k8s.gcr.io
          networking:
            dnsDomain: cluster.local
            podSubnet: 10.244.0.0/16
            serviceSubnet: 10.96.0.0/12
          scheduler: {}
          ...
systemd:
  units:
    - name: docker.service
      mask: true
    - name: kubelet.service
      enabled: false
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/home/
        [Service]
        ExecStart=/usr/local/bin/kubelet
        Restart=always
        StartLimitInterval=0
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
      dropins:
        - name: 10-kubeadm.conf
          contents: |
            # Note: This dropin only works with kubeadm and kubelet v1.11+
            [Service]
            Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
            Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
            # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
            EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
            # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
            # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
            EnvironmentFile=-/etc/sysconfig/kubelet
            ExecStart=
            ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
    - name: install-k8s.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes
        After=network-online.target
        Wants=network-online.target
        Before=systemd-user-sessions.service
        ConditionPathExists=!/usr/local/.k8s_installed
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/bash /usr/local/bin/install-k8s.sh
        StandardOutput=syslog+kmsg+console
        StandardError=syslog+kmsg+console
        [Install]
        WantedBy=multi-user.target

